{"version":3,"sources":["logo.svg","axios.js","requests.js","Row.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Banner","props","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58861ba3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import axios from \"axios\";\r\n\r\n/** base url to make requests to the movie database */\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","const API_KEY  = \"60b2cddbc95621edc47a67a069a69d71\";\r\n\r\nconst requests = {\r\n fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport  './Row.css';\r\nimport requests from './requests';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from  'movie-trailer';\r\nconst base_url = \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        // if [], run once when the row loads, and don't run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n           setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n   \r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl(\"\");\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n                // https://www.youtube.com/watch?v=XtMThy8QKqU\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v')); \r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n               <div className=\"row__posters\">\r\n                   {/* several row poster(s) */}\r\n                   {movies.map( movie => (\r\n                       <img className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        key={movie.id} \r\n                        onClick = {() => handleClick(movie)}\r\n                         src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                          alt=\"movie.name\" /> \r\n                   ) ) }\r\n               </div>\r\n                {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} /> } \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;","import { computeHeadingLevel } from '@testing-library/react';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\nfunction Banner(props) {\r\n    const [movie, setMovie] = useState([]);\r\n\r\nuseEffect(() => {\r\n    async function fetchData() {\r\n           const request = await axios.get(requests.fetchNetflixOriginals)\r\n           setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length -1)]);\r\n           return request;\r\n    }\r\n    fetchData();\r\n},[]);\r\n\r\nconsole.log(movie);\r\n\r\nfunction truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n}\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\r\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                )`,\r\n                backgroundPosition: \"center center\",\r\n            }}\r\n            >\r\n           <div className=\"banner__contents\" > \r\n                   <h1 className=\"banner__title\">\r\n                       {movie?.title || movie?.name || movie?.original_name}\r\n                   </h1>\r\n            <div className=\"banner__buttons\">\r\n              <button className=\"banner__button\">Play</button>\r\n              <button className=\"banner__button\">My List</button>\r\n            </div>\r\n            <h1 className=\"banner__description\">\r\n                {truncate(movie?.overview, 150)}\r\n            </h1>\r\n           </div>\r\n           <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner;","import React, { useEffect, useState } from 'react';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\nconst [show, handleShow] = useState(false);\r\n\r\n    useEffect(( )=> {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img \r\n             className=\"nav__logo\"\r\n             src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\r\n             alt=\"Netflix Logo\"\r\n            />\r\n           <img \r\n             className=\"nav__avatar\"\r\n             src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n             alt=\"Netflix Logo\"\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Row from './Row';\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n         <Row title=\"NETFLIX ORIGINALS\" isLargeRow  fetchUrl={requests.fetchNetflixOriginals}/>\n         <Row title=\"Trending Now\"  fetchUrl={requests.fetchTrending}/>\n         <Row title=\"Top Rated\"  fetchUrl={requests.fetchTopRated}/>\n         <Row title=\"Action Movies\"  fetchUrl={requests.fetchActionMovies}/>\n         <Row title=\"Comedy Movies\"  fetchUrl={requests.fetchComedyMovies}/>\n         <Row title=\"Horror Movies\"  fetchUrl={requests.fetchHorrorMovies}/>\n         <Row title=\"Romance Movies\"  fetchUrl={requests.fetchRomanceMovies}/>\n         <Row title=\"Documentaries\"  fetchUrl={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}